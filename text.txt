ng-repeat - може перебирати, як масив так і обєкт.
1) Перебор ng-repeat в ng-repeat (масиву і обєкту):
  <p ng-repeat="obj in array">
    <span ng-repeat="property in obj">{{property}}, </span>
  <p>
2) Перебор значень обєкту:
  <p ng-repeat="obj in array">
    <span ng-repeat="(key, value) in obj">{{key}} = {{value}}, </span>
  <p>
3) Додавання номеру до репіту - $index:
  <tr ng-repeat="item in items">
    <td>{{$index + 1}}<td>
    <td>{{item.value}}<td>
  </tr>
4) $even $odd
  <tr ng-repeat="item in items" ng-class="$even ? 'class1' : 'class2'">
5)ng-first ng-last
6) ng-repeat-start ng-repeat-end - для того щоб не використовувати врапер
  <p ng-repeat-start="item in items">{{$index + 1}}</p>
  <p>{{item.title}}</p>
  <p ng-repeat-end>{{item.text}}<p>
--------------------------------------------------------------------------------
ng-cloak - не дозволяє показувати шаблон {{}} до повної загрузки сторінки
--------------------------------------------------------------------------------
ng-option - option for select
  <select ng-model="selected"
    ng-option="item.prop for item in items track by item.value">
  </select>
  item.prop - буде записаний в option
  track by item.value - оприділяє яке значення буде записане в value
--------------------------------------------------------------------------------
ng-include - скачує частину html-коду, виконує вираз привязки і додає результат
  на сторінку. Для отримання фрагенту коду використовується ajax.
  (дивися в папку ng-include)
  працює тільки на сервері
















--------------------------------------------------------------------------------
$scope - обєкт який звязує користувацький інтерфейс(view) з контролером.
$rootScope - кореневий елемент всіх скоупів.

Для визначення контроллера без $scope використовується
  ng-controller="learnListCtrl as ctrl" тоді використовується this


! Взаємодія між скоупами контролерами
1) Якщо вкладені один в одний. Але тоді для значень пртрібно використовувати
ссилочний тип даних:
$scope.value = {data: 'Base Value'}
  і міняти так:
$scope.value.data = lalalal
  а не просто
$scope.value = 'Base Value';

2)$broadcast(name, args) - передача подій дочірнім скоупам
name - імя події
args - обєкт з даними

3)$emit(name, args) - передача батьківським скоупам
name - імя події
args - обєкт з даними

4) $on(name, handler) - отримувач події з іншого скоупу?
name - імя події
handler - функція яка обробляє подію

!!!Зупинка події stopPropagation()

$scope.$on("messageEvent", function(event, args){
  event.stopPropagation();
})


--------------------------------------------------------------------------------
$watch - cлідкує за зміною елементу, якщо використовувати якийсь нативний метод
js то може автоматично не відслідковуватися

$scope.counter = 0;
$scope.$watch("counter", function(newValue, oldValue){
  console.log(newValue, oldValue)
})

Примусовий обхід $digest()

setInterval(function(){
  $scope.counter++
  $scope.$digest()
}, 1000)

!!! Замість $digest() рекомендується використовувати метод $apply()

setInterval(function(){
  $scope.$apply(function(){
    $scope.counter++;
  })
})
